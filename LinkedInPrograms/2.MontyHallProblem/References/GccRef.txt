=====================================================================================================================================================================================
References:
https://caiorss.github.io/C-Cpp-Notes/compiler-flags-options.html 
https://gcc.gnu.org/onlinedocs/

=====================================================================================================================================================================================
Compiler flags:
=====================================================================================================================================================================================
* Compilation Stage:
   > g++ -c myprog.cpp support1.cpp support2.cpp -I<IncludeDir1> -I<IncludeDir2> -I<IncludeDirN>

* Linking Stage (works for both static and dynamic linking):
   > g++ -g -o myApp myprog.o support1.o support1.o -L<AbsPath_Library1> -L<AbsPath_Library2> -L<AbsPath_LibraryN> -l<LibName1> -l<LibName2> -l<LibNameN>
   For example: 
    * Dynamic library name = libmath.so, then OPT_1 '-lmath' or OPT_2 '-l:libmath.so'
    * Static library name  = libmath.a,  then OPT_1 '-lmath' or OPT_2 '-l:libmath.a'
   Best Practice:
    - Do not keep static and dynamic versions of a library in the same directory. Use OPT_1. 
    - If they are in the same directory, use OPT_2 but OPT_2 is not portable across different environments. 


* LD_LIBRARY_PATH environment variable: 
   > export LD_LIBRARY_PATH=/path/to/directory1:/path/to/directory2
    - providing library path at run-time for linking with the dynamic libraries defined with -l flags during linking stage of compilation 
    - takes precedence over the standard library paths and other paths defined with -L flags during linking stage of compilation
    - Mandatory for the dynamic linked libraries; OS needs to know; -L flag is for the compiler to know.
    - add in the run script.

* Creating a static library:
   > g++ -c -o file1.o file1.cpp
   > g++ -c -o file2.o file2.cpp
   > ar rcs libmylibrary.a file1.o file2.o
    
    ar: This is the archiving tool used to create static libraries.
    rcs: These flags are used with ar to create or update a static library.
    r: Insert the specified files into the archive.
    c: Create the archive if it does not already exist.
    s: Write an object-file index into the archive, or update an existing one.

* Creating a shared library:
   > g++ -c -fPIC -o file1.o file1.cpp
   > g++ -c -fPIC -o file2.o file2.cpp
   > g++ -shared -o libmylibrary.so file1.o file2.o
   
   '-fPIC'   : flag generates position-independent code
   '-shared' : flag to compile into a shared library 

   Position Independent Code (PIC): 
   - machine code that can execute properly regardless of its absolute address. 
   - crucial for compiling into shared libraries as they can be loaded into memory at different addresses each time they are used by an application.

* Other compilation flags:
    -fopenmp         : enable openmp threads
    -pg              : turns on profiling with gprof 
    
    -D[FLAG]  
    -D[FLAG]=VALUE  :  Pass preprocessor flag #if FLAG â€¦
    
    -E               : generates only the preprocessed file
    -S               : generates only the assembly file
    -g               : compile with debug symbols
    -save-temps      : save all the intermediate files created during compilation
    -Wall            : report all the warnings
    -Werror          : treat all warnings as errors
    -std=c++17       : set C++ standard 
    -O<Level>        : turn on the optimization; Level = 0-3; 0 = Off 

* Important Unix utilities 
    1. objdump : Displays information about one or more object files
        objdump -d <objectFile>    // Dissambles the binary to assembly  
        objdump -S <objectFile>    // Dissamble the binary compiled with debug flags to assembly, 
                                   // if possible (otherwise it is same as -d)
        objdump -h <objectFile>    // Display summary information from header section of object file 

    2. strip 
        strip <BinaryFile>         // Strip all the debug symbols from the binary  



